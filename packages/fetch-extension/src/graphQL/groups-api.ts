import { gql } from "@apollo/client";
import { GroupDetails, PublicKeyDetails } from "@chatTypes";
import { client } from "./client";
import {
  Group,
  leaveGroupMutation,
  UpdateGroupLastSeen,
  UpdatePublicKey,
} from "./groups-queries";

export const updatePublicKey = async (
  publicKeyDetails: PublicKeyDetails,
  accessToken: string
) => {
  const { data, errors } = await client.mutate({
    mutation: gql(UpdatePublicKey),
    fetchPolicy: "no-cache",
    context: {
      headers: {
        Authorization: `Bearer ${accessToken}`,
      },
    },
    variables: {
      publicKeyDetails,
    },
  });

  if (errors) console.log("errors", errors);
  return data.updatePublicKey;
};

export const createGroup = async (
  groupDetails: GroupDetails,
  accessToken: string
) => {
  try {
    const { data, errors } = await client.mutate({
      mutation: gql(Group),
      fetchPolicy: "no-cache",
      context: {
        headers: {
          Authorization: `Bearer ${accessToken}`,
        },
      },
      variables: { groupDetails },
    });
    if (errors) {
      return {
        type: "Group",
        message: errors || "Something went wrong, Group can't be created",
        level: 1,
      };
    }
    return data.group;
  } catch (e: any) {
    return {
      type: "Group",
      message: e?.message || "Something went wrong, Group can't be created",
      level: 1,
    };
  }
};

export const leaveGroup = async (groupId: string, accessToken: string) => {
  try {
    const { data, errors } = await client.mutate({
      mutation: gql(leaveGroupMutation),
      fetchPolicy: "no-cache",
      context: {
        headers: {
          Authorization: `Bearer ${accessToken}`,
        },
      },
      variables: { groupId },
    });
    if (errors) {
      return {
        type: "Group",
        message: errors || "Something went wrong, Group can't be left",
        level: 1,
      };
    }
    return data;
  } catch (e: any) {
    return {
      type: "Group",
      message: e?.message || "Something went wrong, Group can't be left",
      level: 1,
    };
  }
};

export const deleteGroup = async (groupId: string, accessToken: string) => {
  try {
    const { data, errors } = await client.mutate({
      mutation: gql(`mutation Mutation($groupId: String) {
        deleteGroup(groupId: $groupId)
      }`),
      fetchPolicy: "no-cache",
      context: {
        headers: {
          Authorization: `Bearer ${accessToken}`,
        },
      },
      variables: { groupId },
    });
    if (errors) {
      return {
        type: "Group",
        message: errors || "Something went wrong, Group can't be deleted",
        level: 1,
      };
    }
    return data.group;
  } catch (e: any) {
    return {
      type: "Group",
      message: e?.message || "Something went wrong, Group can't be deleted",
      level: 1,
    };
  }
};

//already generated by vinay
export const updateGroupLastSeen = async (
  groupId: string,
  lastSeenTimestamp: string,
  accessToken: string
) => {
  const { data, errors } = await client.mutate({
    mutation: gql(UpdateGroupLastSeen),
    fetchPolicy: "no-cache",
    context: {
      headers: {
        Authorization: `Bearer ${accessToken}`,
      },
    },
    variables: { groupId, lastSeenTimestamp },
  });
  if (errors) console.log("errors", errors);
  return data.updateGroupLastSeen;
};
